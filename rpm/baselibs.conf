arch i586 targets armv5tel:armv5tel armv6l:armv6l armv7l:armv7l armv7hl:armv7hl armv7nhl:armv7nhl armv7tnhl:armv7tnhl mipsel:mipsel i486:i486 x86_64:x86_64 

cross-armv5tel-gcc-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7nhl block!
  targettype armv7tnhl block!
  targettype mipsel block!
  targettype i486 block!
  targettype x86_64 block!

  targettype armv5tel autoreqprov off
  targettype armv5tel provides "cross-arm-gcc-accel"
  targettype armv5tel requires "glibc-x86-arm"
  targettype armv5tel requires "gmp-x86-arm"
  targettype armv5tel requires "libgcc-x86-arm"
  targettype armv5tel requires "mpfr-x86-arm"
  targettype armv5tel requires "mpc-x86-arm"
  targettype armv5tel requires "gcc"
  targettype armv5tel requires "gcc-c++"


  targettype armv5tel prefix /emul/ia32-linux
  targettype armv5tel extension -arm
  targettype armv5tel +/
  targettype armv5tel -/usr/lib/debug
  targettype armv5tel -/usr/src/debug
  targettype armv5tel -/usr/share/man
  targettype armv5tel -/usr/share/doc
  targettype armv5tel -/usr/share/locale
  targettype armv5tel requires "meego-accelerator"
  targettype armv5tel post "#set -x"
  targettype armv5tel post " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv5tel post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv5tel post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype armv5tel post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype armv5tel post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype armv5tel post "  for bin in gcc g++ ; do "
  targettype armv5tel post "   binary="/usr/bin/${bin}" "
  targettype armv5tel post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv5tel post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype armv5tel post "   else "
  targettype armv5tel post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv5tel post "   fi "
  targettype armv5tel post "  done "

  targettype armv5tel post "  for bin in cc1 cc1plus ; do "
  targettype armv5tel post "   binary="/usr/libexec/gcc/armv5tel-meego-linux-gnueabi/$GCCVER/$bin" "
  targettype armv5tel post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv5tel post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/libexec/gcc/armv5tel-meego-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype armv5tel post "   else "
  targettype armv5tel post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv5tel post "   fi "
  targettype armv5tel post "  done "
  targettype armv5tel post " else"
  targettype armv5tel post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype armv5tel post "  for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"  
  targettype armv5tel post "   binary="/usr/bin/${bin}" "  
  targettype armv5tel post "   if test -e ${binary}.orig-arm ; then"  
  targettype armv5tel post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype armv5tel post "   else "  
  targettype armv5tel post "     echo "${binary}.orig-arm not present !" "  
  targettype armv5tel post "   fi "  
  targettype armv5tel post "  done "  
  targettype armv5tel post " fi"

  targettype armv5tel preun " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv5tel preun " for i in gcc g++ ; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype armv5tel preun " for i in cc1 cc1plus ; do cd /usr/libexec/gcc/armv5tel-meego-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "



cross-armv6l-gcc-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7nhl block!
  targettype armv7tnhl block!
  targettype mipsel block!
  targettype i486 block!
  targettype x86_64 block!

  targettype armv6l autoreqprov off
  targettype armv6l provides "cross-arm-gcc-accel"
  targettype armv6l requires "glibc-x86-arm"
  targettype armv6l requires "gmp-x86-arm"
  targettype armv6l requires "libgcc-x86-arm"
  targettype armv6l requires "mpfr-x86-arm"
  targettype armv6l requires "mpc-x86-arm"
  targettype armv6l requires "gcc"
  targettype armv6l requires "gcc-c++"


  targettype armv6l prefix /emul/ia32-linux
  targettype armv6l extension -arm
  targettype armv6l +/
  targettype armv6l -/usr/lib/debug
  targettype armv6l -/usr/src/debug
  targettype armv6l -/usr/share/man
  targettype armv6l -/usr/share/doc
  targettype armv6l -/usr/share/locale
  targettype armv6l requires "meego-accelerator"
  targettype armv6l post "#set -x"
  targettype armv6l post " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv6l post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv6l post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype armv6l post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype armv6l post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype armv6l post "  for bin in gcc g++ ; do "
  targettype armv6l post "   binary="/usr/bin/${bin}" "
  targettype armv6l post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv6l post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype armv6l post "   else "
  targettype armv6l post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv6l post "   fi "
  targettype armv6l post "  done "

  targettype armv6l post "  for bin in cc1 cc1plus ; do "
  targettype armv6l post "   binary="/usr/libexec/gcc/armv6l-meego-linux-gnueabi/$GCCVER/$bin" "
  targettype armv6l post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv6l post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/libexec/gcc/armv6l-meego-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype armv6l post "   else "
  targettype armv6l post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv6l post "   fi "
  targettype armv6l post "  done "
  targettype armv6l post " else"
  targettype armv6l post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype armv6l post "  for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"  
  targettype armv6l post "   binary="/usr/bin/${bin}" "  
  targettype armv6l post "   if test -e ${binary}.orig-arm ; then"  
  targettype armv6l post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype armv6l post "   else "  
  targettype armv6l post "     echo "${binary}.orig-arm not present !" "  
  targettype armv6l post "   fi "  
  targettype armv6l post "  done "  
  targettype armv6l post " fi"

  targettype armv6l preun " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv6l preun " for i in gcc g++ ; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype armv6l preun " for i in cc1 cc1plus ; do cd /usr/libexec/gcc/armv6l-meego-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "



cross-armv7l-gcc-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7hl block!
  targettype armv7nhl block!
  targettype armv7tnhl block!
  targettype mipsel block!
  targettype i486 block!
  targettype x86_64 block!

  targettype armv7l autoreqprov off
  targettype armv7l provides "cross-arm-gcc-accel"
  targettype armv7l requires "glibc-x86-arm"
  targettype armv7l requires "gmp-x86-arm"
  targettype armv7l requires "libgcc-x86-arm"
  targettype armv7l requires "mpfr-x86-arm"
  targettype armv7l requires "mpc-x86-arm"
  targettype armv7l requires "gcc"
  targettype armv7l requires "gcc-c++"


  targettype armv7l prefix /emul/ia32-linux
  targettype armv7l extension -arm
  targettype armv7l +/
  targettype armv7l -/usr/lib/debug
  targettype armv7l -/usr/src/debug
  targettype armv7l -/usr/share/man
  targettype armv7l -/usr/share/doc
  targettype armv7l -/usr/share/locale
  targettype armv7l requires "meego-accelerator"
  targettype armv7l post "#set -x"
  targettype armv7l post " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv7l post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv7l post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype armv7l post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype armv7l post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype armv7l post "  for bin in gcc g++ ; do "
  targettype armv7l post "   binary="/usr/bin/${bin}" "
  targettype armv7l post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv7l post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype armv7l post "   else "
  targettype armv7l post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7l post "   fi "
  targettype armv7l post "  done "

  targettype armv7l post "  for bin in cc1 cc1plus ; do "
  targettype armv7l post "   binary="/usr/libexec/gcc/armv7l-meego-linux-gnueabi/$GCCVER/$bin" "
  targettype armv7l post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv7l post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/libexec/gcc/armv7l-meego-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype armv7l post "   else "
  targettype armv7l post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7l post "   fi "
  targettype armv7l post "  done "
  targettype armv7l post " else"
  targettype armv7l post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype armv7l post "  for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"  
  targettype armv7l post "   binary="/usr/bin/${bin}" "  
  targettype armv7l post "   if test -e ${binary}.orig-arm ; then"  
  targettype armv7l post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype armv7l post "   else "  
  targettype armv7l post "     echo "${binary}.orig-arm not present !" "  
  targettype armv7l post "   fi "  
  targettype armv7l post "  done "  
  targettype armv7l post " fi"

  targettype armv7l preun " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv7l preun " for i in gcc g++ ; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype armv7l preun " for i in cc1 cc1plus ; do cd /usr/libexec/gcc/armv7l-meego-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "



cross-armv7hl-gcc-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7nhl block!
  targettype armv7tnhl block!
  targettype mipsel block!
  targettype i486 block!
  targettype x86_64 block!

  targettype armv7hl autoreqprov off
  targettype armv7hl provides "cross-arm-gcc-accel"
  targettype armv7hl requires "glibc-x86-arm"
  targettype armv7hl requires "gmp-x86-arm"
  targettype armv7hl requires "libgcc-x86-arm"
  targettype armv7hl requires "mpfr-x86-arm"
  targettype armv7hl requires "mpc-x86-arm"
  targettype armv7hl requires "gcc"
  targettype armv7hl requires "gcc-c++"


  targettype armv7hl prefix /emul/ia32-linux
  targettype armv7hl extension -arm
  targettype armv7hl +/
  targettype armv7hl -/usr/lib/debug
  targettype armv7hl -/usr/src/debug
  targettype armv7hl -/usr/share/man
  targettype armv7hl -/usr/share/doc
  targettype armv7hl -/usr/share/locale
  targettype armv7hl requires "meego-accelerator"
  targettype armv7hl post "#set -x"
  targettype armv7hl post " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv7hl post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv7hl post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype armv7hl post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype armv7hl post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype armv7hl post "  for bin in gcc g++ ; do "
  targettype armv7hl post "   binary="/usr/bin/${bin}" "
  targettype armv7hl post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv7hl post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype armv7hl post "   else "
  targettype armv7hl post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7hl post "   fi "
  targettype armv7hl post "  done "

  targettype armv7hl post "  for bin in cc1 cc1plus ; do "
  targettype armv7hl post "   binary="/usr/libexec/gcc/armv7hl-meego-linux-gnueabi/$GCCVER/$bin" "
  targettype armv7hl post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv7hl post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/libexec/gcc/armv7hl-meego-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype armv7hl post "   else "
  targettype armv7hl post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7hl post "   fi "
  targettype armv7hl post "  done "
  targettype armv7hl post " else"
  targettype armv7hl post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype armv7hl post "  for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"  
  targettype armv7hl post "   binary="/usr/bin/${bin}" "  
  targettype armv7hl post "   if test -e ${binary}.orig-arm ; then"  
  targettype armv7hl post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype armv7hl post "   else "  
  targettype armv7hl post "     echo "${binary}.orig-arm not present !" "  
  targettype armv7hl post "   fi "  
  targettype armv7hl post "  done "  
  targettype armv7hl post " fi"

  targettype armv7hl preun " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv7hl preun " for i in gcc g++ ; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype armv7hl preun " for i in cc1 cc1plus ; do cd /usr/libexec/gcc/armv7hl-meego-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "



cross-armv7nhl-gcc-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7tnhl block!
  targettype mipsel block!
  targettype i486 block!
  targettype x86_64 block!

  targettype armv7nhl autoreqprov off
  targettype armv7nhl provides "cross-arm-gcc-accel"
  targettype armv7nhl requires "glibc-x86-arm"
  targettype armv7nhl requires "gmp-x86-arm"
  targettype armv7nhl requires "libgcc-x86-arm"
  targettype armv7nhl requires "mpfr-x86-arm"
  targettype armv7nhl requires "mpc-x86-arm"
  targettype armv7nhl requires "gcc"
  targettype armv7nhl requires "gcc-c++"


  targettype armv7nhl prefix /emul/ia32-linux
  targettype armv7nhl extension -arm
  targettype armv7nhl +/
  targettype armv7nhl -/usr/lib/debug
  targettype armv7nhl -/usr/src/debug
  targettype armv7nhl -/usr/share/man
  targettype armv7nhl -/usr/share/doc
  targettype armv7nhl -/usr/share/locale
  targettype armv7nhl requires "meego-accelerator"
  targettype armv7nhl post "#set -x"
  targettype armv7nhl post " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv7nhl post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv7nhl post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype armv7nhl post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype armv7nhl post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype armv7nhl post "  for bin in gcc g++ ; do "
  targettype armv7nhl post "   binary="/usr/bin/${bin}" "
  targettype armv7nhl post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv7nhl post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype armv7nhl post "   else "
  targettype armv7nhl post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7nhl post "   fi "
  targettype armv7nhl post "  done "

  targettype armv7nhl post "  for bin in cc1 cc1plus ; do "
  targettype armv7nhl post "   binary="/usr/libexec/gcc/armv7nhl-meego-linux-gnueabi/$GCCVER/$bin" "
  targettype armv7nhl post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv7nhl post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/libexec/gcc/armv7nhl-meego-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype armv7nhl post "   else "
  targettype armv7nhl post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7nhl post "   fi "
  targettype armv7nhl post "  done "
  targettype armv7nhl post " else"
  targettype armv7nhl post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype armv7nhl post "  for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"  
  targettype armv7nhl post "   binary="/usr/bin/${bin}" "  
  targettype armv7nhl post "   if test -e ${binary}.orig-arm ; then"  
  targettype armv7nhl post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype armv7nhl post "   else "  
  targettype armv7nhl post "     echo "${binary}.orig-arm not present !" "  
  targettype armv7nhl post "   fi "  
  targettype armv7nhl post "  done "  
  targettype armv7nhl post " fi"

  targettype armv7nhl preun " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv7nhl preun " for i in gcc g++ ; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype armv7nhl preun " for i in cc1 cc1plus ; do cd /usr/libexec/gcc/armv7nhl-meego-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "



cross-armv7tnhl-gcc-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7nhl block!
  targettype mipsel block!
  targettype i486 block!
  targettype x86_64 block!

  targettype armv7tnhl autoreqprov off
  targettype armv7tnhl provides "cross-arm-gcc-accel"
  targettype armv7tnhl requires "glibc-x86-arm"
  targettype armv7tnhl requires "gmp-x86-arm"
  targettype armv7tnhl requires "libgcc-x86-arm"
  targettype armv7tnhl requires "mpfr-x86-arm"
  targettype armv7tnhl requires "mpc-x86-arm"
  targettype armv7tnhl requires "gcc"
  targettype armv7tnhl requires "gcc-c++"


  targettype armv7tnhl prefix /emul/ia32-linux
  targettype armv7tnhl extension -arm
  targettype armv7tnhl +/
  targettype armv7tnhl -/usr/lib/debug
  targettype armv7tnhl -/usr/src/debug
  targettype armv7tnhl -/usr/share/man
  targettype armv7tnhl -/usr/share/doc
  targettype armv7tnhl -/usr/share/locale
  targettype armv7tnhl requires "meego-accelerator"
  targettype armv7tnhl post "#set -x"
  targettype armv7tnhl post " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv7tnhl post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv7tnhl post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype armv7tnhl post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype armv7tnhl post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype armv7tnhl post "  for bin in gcc g++ ; do "
  targettype armv7tnhl post "   binary="/usr/bin/${bin}" "
  targettype armv7tnhl post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv7tnhl post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype armv7tnhl post "   else "
  targettype armv7tnhl post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7tnhl post "   fi "
  targettype armv7tnhl post "  done "

  targettype armv7tnhl post "  for bin in cc1 cc1plus ; do "
  targettype armv7tnhl post "   binary="/usr/libexec/gcc/armv7tnhl-meego-linux-gnueabi/$GCCVER/$bin" "
  targettype armv7tnhl post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype armv7tnhl post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/libexec/gcc/armv7tnhl-meego-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype armv7tnhl post "   else "
  targettype armv7tnhl post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7tnhl post "   fi "
  targettype armv7tnhl post "  done "
  targettype armv7tnhl post " else"
  targettype armv7tnhl post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype armv7tnhl post "  for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"  
  targettype armv7tnhl post "   binary="/usr/bin/${bin}" "  
  targettype armv7tnhl post "   if test -e ${binary}.orig-arm ; then"  
  targettype armv7tnhl post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype armv7tnhl post "   else "  
  targettype armv7tnhl post "     echo "${binary}.orig-arm not present !" "  
  targettype armv7tnhl post "   fi "  
  targettype armv7tnhl post "  done "  
  targettype armv7tnhl post " fi"

  targettype armv7tnhl preun " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype armv7tnhl preun " for i in gcc g++ ; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype armv7tnhl preun " for i in cc1 cc1plus ; do cd /usr/libexec/gcc/armv7tnhl-meego-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "



cross-mipsel-gcc-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7nhl block!
  targettype armv7tnhl block!
  targettype i486 block!
  targettype x86_64 block!

  targettype mipsel autoreqprov off
  targettype mipsel provides "cross-arm-gcc-accel"
  targettype mipsel requires "glibc-x86-arm"
  targettype mipsel requires "gmp-x86-arm"
  targettype mipsel requires "libgcc-x86-arm"
  targettype mipsel requires "mpfr-x86-arm"
  targettype mipsel requires "mpc-x86-arm"
  targettype mipsel requires "gcc"
  targettype mipsel requires "gcc-c++"


  targettype mipsel prefix /emul/ia32-linux
  targettype mipsel extension -arm
  targettype mipsel +/
  targettype mipsel -/usr/lib/debug
  targettype mipsel -/usr/src/debug
  targettype mipsel -/usr/share/man
  targettype mipsel -/usr/share/doc
  targettype mipsel -/usr/share/locale
  targettype mipsel requires "meego-accelerator"
  targettype mipsel post "#set -x"
  targettype mipsel post " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype mipsel post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype mipsel post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype mipsel post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype mipsel post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype mipsel post "  for bin in gcc g++ ; do "
  targettype mipsel post "   binary="/usr/bin/${bin}" "
  targettype mipsel post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype mipsel post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype mipsel post "   else "
  targettype mipsel post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype mipsel post "   fi "
  targettype mipsel post "  done "

  targettype mipsel post "  for bin in cc1 cc1plus ; do "
  targettype mipsel post "   binary="/usr/libexec/gcc/mipsel-meego-linux-gnueabi/$GCCVER/$bin" "
  targettype mipsel post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype mipsel post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/libexec/gcc/mipsel-meego-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype mipsel post "   else "
  targettype mipsel post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype mipsel post "   fi "
  targettype mipsel post "  done "
  targettype mipsel post " else"
  targettype mipsel post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype mipsel post "  for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"  
  targettype mipsel post "   binary="/usr/bin/${bin}" "  
  targettype mipsel post "   if test -e ${binary}.orig-arm ; then"  
  targettype mipsel post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype mipsel post "   else "  
  targettype mipsel post "     echo "${binary}.orig-arm not present !" "  
  targettype mipsel post "   fi "  
  targettype mipsel post "  done "  
  targettype mipsel post " fi"

  targettype mipsel preun " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype mipsel preun " for i in gcc g++ ; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype mipsel preun " for i in cc1 cc1plus ; do cd /usr/libexec/gcc/mipsel-meego-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "



cross-i486-gcc-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7nhl block!
  targettype armv7tnhl block!
  targettype mipsel block!
  targettype x86_64 block!

  targettype i486 autoreqprov off
  targettype i486 provides "cross-arm-gcc-accel"
  targettype i486 requires "glibc-x86-arm"
  targettype i486 requires "gmp-x86-arm"
  targettype i486 requires "libgcc-x86-arm"
  targettype i486 requires "mpfr-x86-arm"
  targettype i486 requires "mpc-x86-arm"
  targettype i486 requires "gcc"
  targettype i486 requires "gcc-c++"


  targettype i486 prefix /emul/ia32-linux
  targettype i486 extension -arm
  targettype i486 +/
  targettype i486 -/usr/lib/debug
  targettype i486 -/usr/src/debug
  targettype i486 -/usr/share/man
  targettype i486 -/usr/share/doc
  targettype i486 -/usr/share/locale
  targettype i486 requires "meego-accelerator"
  targettype i486 post "#set -x"
  targettype i486 post " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype i486 post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype i486 post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype i486 post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype i486 post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype i486 post "  for bin in gcc g++ ; do "
  targettype i486 post "   binary="/usr/bin/${bin}" "
  targettype i486 post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype i486 post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype i486 post "   else "
  targettype i486 post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype i486 post "   fi "
  targettype i486 post "  done "

  targettype i486 post "  for bin in cc1 cc1plus ; do "
  targettype i486 post "   binary="/usr/libexec/gcc/i486-meego-linux-gnueabi/$GCCVER/$bin" "
  targettype i486 post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype i486 post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/libexec/gcc/i486-meego-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype i486 post "   else "
  targettype i486 post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype i486 post "   fi "
  targettype i486 post "  done "
  targettype i486 post " else"
  targettype i486 post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype i486 post "  for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"  
  targettype i486 post "   binary="/usr/bin/${bin}" "  
  targettype i486 post "   if test -e ${binary}.orig-arm ; then"  
  targettype i486 post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype i486 post "   else "  
  targettype i486 post "     echo "${binary}.orig-arm not present !" "  
  targettype i486 post "   fi "  
  targettype i486 post "  done "  
  targettype i486 post " fi"

  targettype i486 preun " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype i486 preun " for i in gcc g++ ; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype i486 preun " for i in cc1 cc1plus ; do cd /usr/libexec/gcc/i486-meego-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "



cross-x86_64-gcc-accel
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7nhl block!
  targettype armv7tnhl block!
  targettype mipsel block!
  targettype i486 block!

  targettype x86_64 autoreqprov off
  targettype x86_64 provides "cross-arm-gcc-accel"
  targettype x86_64 requires "glibc-x86-arm"
  targettype x86_64 requires "gmp-x86-arm"
  targettype x86_64 requires "libgcc-x86-arm"
  targettype x86_64 requires "mpfr-x86-arm"
  targettype x86_64 requires "mpc-x86-arm"
  targettype x86_64 requires "gcc"
  targettype x86_64 requires "gcc-c++"


  targettype x86_64 prefix /emul/ia32-linux
  targettype x86_64 extension -arm
  targettype x86_64 +/
  targettype x86_64 -/usr/lib/debug
  targettype x86_64 -/usr/src/debug
  targettype x86_64 -/usr/share/man
  targettype x86_64 -/usr/share/doc
  targettype x86_64 -/usr/share/locale
  targettype x86_64 requires "meego-accelerator"
  targettype x86_64 post "#set -x"
  targettype x86_64 post " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype x86_64 post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype x86_64 post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype x86_64 post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype x86_64 post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype x86_64 post "  for bin in gcc g++ ; do "
  targettype x86_64 post "   binary="/usr/bin/${bin}" "
  targettype x86_64 post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype x86_64 post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype x86_64 post "   else "
  targettype x86_64 post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype x86_64 post "   fi "
  targettype x86_64 post "  done "

  targettype x86_64 post "  for bin in cc1 cc1plus ; do "
  targettype x86_64 post "   binary="/usr/libexec/gcc/x86_64-meego-linux-gnueabi/$GCCVER/$bin" "
  targettype x86_64 post "   if test -e ${binary} -a ! -e ${binary}.orig-arm ; then"
  targettype x86_64 post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/libexec/gcc/x86_64-meego-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype x86_64 post "   else "
  targettype x86_64 post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype x86_64 post "   fi "
  targettype x86_64 post "  done "
  targettype x86_64 post " else"
  targettype x86_64 post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype x86_64 post "  for bin in addr2line ar as c++filt gprov ld nm objcopy objdump ranlib readelf size strings strip ; do"  
  targettype x86_64 post "   binary="/usr/bin/${bin}" "  
  targettype x86_64 post "   if test -e ${binary}.orig-arm ; then"  
  targettype x86_64 post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype x86_64 post "   else "  
  targettype x86_64 post "     echo "${binary}.orig-arm not present !" "  
  targettype x86_64 post "   fi "  
  targettype x86_64 post "  done "  
  targettype x86_64 post " fi"

  targettype x86_64 preun " export GCCVER=$(LANG=C gcc --version | head -1 | sed 's/\([a-z+]*\) \((.*)\) \([1-9\.]*\)\(.*\)/\3/') "
  targettype x86_64 preun " for i in gcc g++ ; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype x86_64 preun " for i in cc1 cc1plus ; do cd /usr/libexec/gcc/x86_64-meego-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "


